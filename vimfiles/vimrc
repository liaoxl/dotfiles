" Author: Xiangli Liao
" Email: liaoxl2012@gmail.com
" Website: http://liaoxl.github.com
" For my VIM
"

" Which system
if(has("win32") || has("win64"))
	let g:isWIN = 1
else
	let g:isWIN = 0
endif

" GUI
if has("gui_running")
	let g:isGUI = 1
else
	let g:isGUI = 0
endif


set nocompatible    " be iMproved
filetype off        " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
Bundle 'kien/ctrlp.vim'

" Indent strategy
set shiftwidth=4
set tabstop=4

" Indent for some filetypes
au FileType ruby,eruby,coffee,sh set shiftwidth=2
au FileType ruby,eruby,coffee,sh set tabstop=2

if g:isGUI
	set mouse=a
	set mousemodel=popup
else
	set guifont=Monaca:h11
endif

set backspace=2              " 设置退格键可用
set autoindent               " 自动对齐
set ai!                      " 设置自动缩进
set smartindent              " 智能自动缩进
set relativenumber           " 开启相对行号
set nu!                      " 显示行号
set mouse=a                  " 启用鼠标
set selection=exclusive      "
set selectmode=mouse,key     "
set ruler                    " 右下角显示光标位置的状态行
set incsearch                " 开启实时搜索功能
set hlsearch                 " 开启高亮显示结果
set showmatch                " show
set nowrapscan               " 搜索到文件两端时不重新搜索
set nocompatible             " 关闭兼容模式
set hidden                   " 允许在有未保存的修改时切换缓冲区
set autochdir                " 设定文件浏览器目录为当前目录
set foldmethod=syntax        " 选择代码折叠类型
set foldlevel=100            " 禁止自动折叠
set laststatus=2             " 开启状态栏信息
set cmdheight=2              " 命令行的高度，默认为1，这里设为2
set writebackup              " 设置无备份文件
set autoread                 " 当文件在外部被修改时自动更新该文件
set autowrite                " 当前文件自动保存
set nobackup
set nowb
set noswapfile
set list                     " 显示特殊字符，其中Tab使用高亮竖线代替
set listchars=tab:\|\ ,trail:.

" 显示 配色
syntax enable
syntax on
colorscheme desert
set cursorline
hi cursorline cterm=NONE ctermfg=lightgrey ctermbg=lightblue

set showcmd

filetype indent on
filetype plugin on 
filetype plugin indent on    " required!

" 设置文件编码和文件格式
set fenc=utf-8
set encoding=utf-8
set fileencodings=utf-8,gbk,cp936,latin-1
set fileformat=unix
set fileformats=unix,dos,mac

" 引号 && 括号自动匹配
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePairs(')')<CR>
inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePairs('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePairs(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
:inoremap ` ``<ESC>i

func! ClosePairs(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endf

" AuthorInfoDetect
let g:vimrc_author='Moondark'
let g:vimrc_email='liaoxl2012@gmail.com'
let g:vimrc_homepage='http://liaoxl.github.com'

" Indent_guides
let g:indent_guides_enable_on_vim_startup=0  " 默认关闭
let g:indent_guides_guide_size=1             " 指定对齐线的尺寸

" Syntastic           语法检查
let g:syntastic_check_on_open=1              " 默认开启
let g:syntastic_mode_map={'mode': 'active',
            \'active_filetypes':  [],
            \'passive_filetypes': ['html', 'css', 'xhtml', 'eruby', 'scss', 'smarty', 'blade']
            \}                               " 指定不需要检查的语言

" ======= 自定义快捷键 ======= "

" Ctrl + H            光标移当前行行首
imap <c-h> <ESC>I

" Ctrl + J            光标移下一行行首
imap <c-j> <ESC><Down>I

" Ctrl + K            光标移上一行行尾
imap <c-k> <ESC><Up>A


" Ctrl + L            光标移当前行行尾
imap <c-l> <ESC>A


" \c                  复制至公共剪贴板
vmap <leader>c :!xclip -selection clipboard<CR>u
set pastetoggle=<F4>

" \tl                 打开Taglist/TxtBrowser窗口，在右侧栏显示
nmap <leader>tl :Tlist<CR><c-l>

" \16                 十六进制格式查看
nmap <leader>16 <ESC>:%!xxd<ESC>

" \r16                返回普通格式
nmap <leader>r16 <ESC>:%!xxd -r<ESC>

" \rb                 一键去除所有尾部空白
imap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
nmap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
vmap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" \rt                 一键替换全部Tab为空格
func! RemoveTabs()
    if &shiftwidth == 2
        exec "%s/	/  /g"
    elseif &shiftwidth == 4
        exec "%s/	/    /g"
    elseif &shiftwidth == 6
        exec "%s/	/      /g"
    elseif &shiftwidth == 8
        exec "%s/	/        /g"
    else
        exec "%s/	/ /g"
    end
endfunc

imap <leader>rt <ESC>:call RemoveTabs()<CR>
nmap <leader>rt :call RemoveTabs()<CR>
vmap <leader>rt <ESC>:call RemoveTabs()<CR>


" ======= 编译 && 运行  ======= "

" 编译并运行
func! Compile_Run_Code()
    exec "w"
    if &filetype == "c"
        if g:isWIN
            exec "!tcc %:t && %:r.exe"
        else
            exec "!gcc % -o %< && ./%<"
        endif
    elseif &filetype == "cpp"
        exec "!g++ % -o %< && ./%<"
    elseif &filetype == "ruby"
        exec "!ruby %:t"
    elseif &filetype == "php"
        exec "!php %:t"
    elseif &filetype == "sh"
        exec "!bash %:t"
    endif
endfunc

" 编译生成有调试信息的文件
func! Debug_Run_Code()
	exec "w"
	if &filetype == "c"
		exec "gcc -g % -o %< && gdb %<"
	elseif &filetype == "cpp"
		exec "!g++ -g % -o %< && gdb %<"
	endif
endfunc

" F5         一键保存、编译、运行
imap <F5> <ESC>:call Compile_Run_Code()<CR>
nmap <F5> :call Compile_Run_Code()<CR>
vmap <F5> <ESC>:call Compile_Run_Code()<CR>


" <C-F5>  对C/C++生成可调试的文件
imap <C-F5> <ESC>:call Debug_Run_Code()<CR>
nmap <C-F5> :call Debug_Run_Code()<CR>
vmap <C-F5> <ESC>:call Debug_Run_Code()<CR>
" F3 save
imap <F3> <ESC>:w<CR>i
nmap <F3> :w<CR>

" F2 Nerdtree
imap <F2> <ESC>:NERDTree<CR>i
nmap <F2> :NERDTree<CR>
vmap <F2> <ESC>:NERTree<CR>v

